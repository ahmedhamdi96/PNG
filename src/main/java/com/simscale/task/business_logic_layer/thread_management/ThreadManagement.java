package com.simscale.task.business_logic_layer.thread_management;

import com.simscale.task.business_logic_layer.strategies.PrimeStrategyThread;
import com.simscale.task.business_logic_layer.strategies.Strategy1Thread;
import com.simscale.task.business_logic_layer.strategies.Strategy2Thread;
import com.simscale.task.business_logic_layer.strategies.Strategy3Thread;
import com.simscale.task.enums.PrimeStrategyEnum;
import org.apache.log4j.Logger;

import java.util.ArrayList;

public class ThreadManagement {

    private final static Logger LOGGER = Logger.getLogger(ThreadManagement.class);
    private final static Boolean runSingleThread = false; //boolean flag, false -> run multiple threads, true -> run a single thread


    /**
     * return a strategy thread based on the given strategy enum
     * @param name thread name
     * @param from -
     * @param to -
     * @param primeStrategyEnum -
     * @return a strategy thread wrapped in the superclass
     */
    private static PrimeStrategyThread primeStrategiesThreadSwitch(String name, Integer from, Integer to, PrimeStrategyEnum primeStrategyEnum){
        switch (primeStrategyEnum){
            case STRATEGY_1: return new Strategy1Thread(name, from, to);
            case STRATEGY_2: return new Strategy2Thread(name, from, to);
            case STRATEGY_3: return new Strategy3Thread(name, from, to);
        }
        return null;
    }

    /**
     * runs a single thread and returns a list of primes based on the given strategy enum
     * @param from -
     * @param to -
     * @param primeStrategyEnum -
     * @return list of primes generated by the thread
     * @throws InterruptedException exception thrown in case a thread fails
     */
    private static ArrayList<Integer> runSingleThread(Integer from, Integer to, PrimeStrategyEnum primeStrategyEnum) throws InterruptedException {
        PrimeStrategyThread primeStrategyThread = primeStrategiesThreadSwitch(primeStrategyEnum+" single thread", from, to, primeStrategyEnum);
        primeStrategyThread.start();
        primeStrategyThread.join();
        return primeStrategyThread.getPrimes();
    }

    /**
     * run multiple threads based on the number of cores
     * the range from "from" to "to" is split to equal payloads and given to the threads
     * the results from the threads are merged together to return the final list of primes
     * @param from -
     * @param to -
     * @param primeStrategyEnum -
     * @return list of primes
     * @throws InterruptedException exception thrown in case a thread fails
     */
    public static ArrayList<Integer> runThreads(Integer from, Integer to, PrimeStrategyEnum primeStrategyEnum) throws InterruptedException {
        ArrayList<Integer> primes = new ArrayList<Integer>();

        int size = to - from + 1;
        int cores = Runtime.getRuntime().availableProcessors();

        if (runSingleThread || size / cores == 0) {
            return runSingleThread(from, to, primeStrategyEnum);
        } else {
            int threadsNo = cores;
            int threadPayload = size / threadsNo;
            int remainder = size % threadsNo;
            PrimeStrategyThread[] primeStrategyThreads = new PrimeStrategyThread[threadsNo];
            int threadFrom = from;
            int threadTo = from + threadPayload - 1 ;

            for (int i=0; i<threadsNo; i++) {
                PrimeStrategyThread primeStrategyThread = primeStrategiesThreadSwitch(primeStrategyEnum+" thread "+i, threadFrom, threadTo, primeStrategyEnum);
                primeStrategyThreads[i] = primeStrategyThread;
                primeStrategyThread.start();
                threadFrom = threadTo + 1;
                threadTo = threadFrom + threadPayload - 1;

                if (i == threadsNo-1) {
                    //add the remainder if this is the last thread
                    threadTo += remainder;
                }
            }

            for (PrimeStrategyThread primeStrategyThread : primeStrategyThreads) {
                //what for thread to finish
                primeStrategyThread.join();
                //append threads results
                primes.addAll(primeStrategyThread.getPrimes());
            }

        }

        return primes;
    }
}
